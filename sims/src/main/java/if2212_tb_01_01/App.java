/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package if2212_tb_01_01;

import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import if2212_tb_01_01.entities.*;
import if2212_tb_01_01.entities.action.AksiNonWaktu.BerpindahRuangan;
import if2212_tb_01_01.entities.room.Ruangan;
import if2212_tb_01_01.entities.sim.Sim;
import if2212_tb_01_01.objects.*;
import if2212_tb_01_01.objects.furnitur.*;

import if2212_tb_01_01.utils.*;

public class App {
    class MainMenu {
        public MainMenu() {
        }

        public void show(boolean started) {
            if (!started) {
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }

                System.out.println("\n+---------------+");
                System.out.println("| List Menu :   |");
                System.out.println("| 1. Start Game |");
                // System.out.println("| 2. Load Game  |");
                System.out.println("| 2. Help       |");
                System.out.println("| 3. Exit       |");
                System.out.println("+---------------+\n");

            } else {
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
                System.out.println("\n+--------------------------+");
                System.out.println("| List Menu :              |");
                // System.out.println("| 1. Save Game             |");
                System.out.println("| 1. Ganti Kerja           |");
                System.out.println("| 2. View Sim Info         |");
                System.out.println("| 3. View Current Location |");
                System.out.println("| 4. View Inventory        |");
                System.out.println("| 5. Upgrade House         |");
                System.out.println("| 6. Move Room             |");
                System.out.println("| 7. Edit Room             |");
                System.out.println("| 8. Add Sim               |");
                System.out.println("| 9. Change Sim            |");
                System.out.println("| 10. List Object          |");
                System.out.println("| 11. Go To Object         |");
                System.out.println("| 12. Action               |");
                System.out.println("| 13. Exit                 |");
                System.out.println("+--------------------------+");
            }
        }

    }

    private static volatile boolean running = true;
    private static ExecutorService executorService = Executors.newFixedThreadPool(20);

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        App app = new App();
        MainMenu mainMenu = app.new MainMenu();
        boolean startgame = false;
        boolean loadgame = false;
        boolean endedgame = false;
        // boolean isCanAddSim = true;
        
        String command;
        World world = new World(64, 64);
        WorldClock worldClock = new WorldClock(world);
        // Integer indeksActiveSim = 0;
        System.out.println("Selamat datang di Sim-Plicity!");
        while (!startgame && !loadgame && !endedgame) {
            mainMenu.show(startgame);
            System.out.print("Masukkan command: ");
            command = scanner.nextLine().toUpperCase();

            // validasi command
            if (command.equals("START GAME")) {
                startgame = true;
            } 
            else if (command.equals("EXIT")) {
                endedgame = true;
                System.out.println("Sampai jumpa kembali! \n");
            } else if (command.equals("HELP")) {
                System.out.println("Berikut adalah menu dari game sim-plicity beserta fungsinya");
                System.out.println("1.START GAME - Untuk memulai permainan");
                System.out.println("2.EXIT - Untuk keluar dari permainan");
                System.out.println("1.Ganti Kerja - Untuk mengganti kerja sim sesuai dengan yang diinginkan");
                System.out.println("2. View Sim Info - Untuk mengetahui pekerjaan, status kesejahteraan, dan total uang sim yang dimainkan saat ini");
                System.out.println("3. View Current Location - Untuk mengetahui lokasi sim yang dimainkan saat ini");
                System.out.println("4. View Inventory - Untuk melihat isi dari inventory sim yang dimainkan saat ini");
                System.out.println("5. Upgrade House - Untuk melakukan penambahan ruangan pada rumah sim");
                System.out.println("6. Move Room - Untuk berpindah ke ruangan lain");
                System.out.println("7. Edit Room - Untuk melakukan penambahan atau pengambilan item di ruangan");
                System.out.println("8. Add Sim - Untuk menambahkan sim ke dalam world (Hanya 1 kali dalam sehari)");
                System.out.println("9. Change Sim - Untuk mengganti sim yang ingin dimainkan");
                System.out.println("10. List Object - Untuk melihat list object saat ini di dalam ruangan");
                System.out.println("11. Go To Object - Untuk mengunjungi object di dalam ruangan dan melakukan aksi yang dapat dilakukan di object tersebut");
                System.out.println("12. Action  - Untuk melakukan suatu aksi");
                System.out.println("13. Exit - Untuk keluar dari game");

            } else {
                System.out.println("Command tidak valid!! \n");
            }
        }

        if (startgame) {
            // memuat world
            System.out.println("\nMemuat World....");
            Point posisiRumah;

            // Meminta nama sim
            boolean nameValid = false;
            while (!nameValid) {
                System.out.print("Silakan masukkan nama lengkap: ");
                String name = scanner.nextLine();
                if (!name.isBlank()) {
                    nameValid = true;
                    // Meminta posisi Rumah yang ingin dibangun
                    boolean posisiRumahValid = false;
                    while (!posisiRumahValid) {
                        System.out.print(
                                "Masukkan lokasi rumah yang diinginkan dengan format x,y (dari 0,0 sampai 64,64): ");
                        command = scanner.nextLine();
                        posisiRumahValid = InputChecker.isPointRuangan(command);
                        if (posisiRumahValid) {
                            posisiRumah = Point.makePoint(command);
                            // Meminta nama Ruangan yang ingin dibangun
                            boolean ruanganValid = false;
                            while (!ruanganValid) {
                                System.out.print("Masukkan nama ruangan: ");
                                String namaRuangan = scanner.nextLine();
                                if (!namaRuangan.isBlank()) {
                                    ruanganValid = true;
                                    // PosisiRuangan random aja kali yak gw bikinnya dari 0 sampai 6
                                    // posisiRuangan = Point.makeRandomizePoint();
                                    System.out.println("\nMemuat Rumah....");
                                    world.addRumah(new Point(posisiRumah), name, namaRuangan);
                                    world.addSim(new Sim(new Kesejahteraan(80, 80, 80, 80), 100, name, world.getRumah(0)));
                                    world.setIsCanAddSim(true);
                                    // world.getSim(0).getCurrentRuangan().setRoomAbove(new Ruangan("jablay",true));
                                    world.setSimActive(world.getListSim().get(0));
                                    // indeksActiveSim = world.getJumlahSim() - 1;
                                    System.out.println("Selamat datang, " + name + "!");
                                } else {
                                    System.out.println("Nama ruangan tidak valid");
                                }
                            }
                        }
                        // else untuk posisi rumah tidak valid sudah pake exception
                    }
                } else {
                    System.out.println("Nama tidak valid!");
                }
            }
            worldClock.setWorld(world);
            Thread clockThread = new Thread(worldClock);
            clockThread.start();
            // mulai dr sini semua method harus dari worldclock biar ke update trs
        }

        while (!endedgame) {
            mainMenu.show(startgame);
            System.out.print("Masukkan command: ");
            command = scanner.nextLine().toUpperCase();

            // Menu nomor 2 (AMAN)
            if (command.equals("VIEW SIM INFO")) {
                worldClock.getWorld().getSimActive().viewInfo();
                // worldClock.getWorld().getSim(indeksActiveSim).viewInfo();
            }

            else if(command.equals("GANTI KERJA")){
                worldClock.getWorld().getSimActive().changeKerja();
            }

            // Menu nomor 3 (AMAN)
            else if (command.equals("VIEW CURRENT LOCATION")) {
                worldClock.getWorld().getSimActive().viewCurrentLocation();
            }

            // Menu nomor 4 (AMAN)
            else if (command.equals("VIEW INVENTORY")) {
                worldClock.getWorld().getSimActive().viewInventory();
                // worldClock.getWorld().getSim(indeksActiveSim).viewInventory();
            }

            // Menu nomor 5 (AMAN)
            else if(command.equals("UPGRADE HOUSE")){
                worldClock.getWorld().getSimActive().upgradeHouse();
            }

            // Menu nomor 6 (AMAN)
            else if (command.equals("MOVE ROOM")) {
                Ruangan currentRuangan = worldClock.getWorld().getSimActive().getCurrentRuangan();
                if(!currentRuangan.isAdaRoomAbove() && !currentRuangan.isAdaRoomBelow() && !currentRuangan.isAdaRoomLeft() && !currentRuangan.isAdaRoomRight()){
                    System.out.println("Tidak terdapat ruangan lain yang tersedia, silakan upgrade rumah untuk menambah ruangan");
                }
                else{
                    boolean inputValid = false;
                    // final int idx = indeksActiveSim;
                    while (!inputValid) {
                        System.out.print("Masukkan arah ruangan yang ingin dikunjungi ( Pilihan opsi -> "+ currentRuangan.opsiMoveRoom()+"): ");
                        command = scanner.nextLine().toUpperCase();
                        if(command.equals("ATAS") || command.equals("BAWAH") || command.equals("KIRI") || command.equals("KANAN")){
                            inputValid = true;
                            worldClock.getWorld().getSimActive().setAksi(new BerpindahRuangan(worldClock.getWorld().getSimActive(), command));
                            worldClock.getWorld().getSimActive().getAksi().run();
                        }
                        else{
                            System.out.println("Input tidak valid! ");
                        }
                    }
                }
            }

            // Menu nomor 7 (AMAN)
            else if(command.equals("EDIT ROOM")){
                System.out.println("Opsi kegiatan yang dapat dilakukan: ");
                System.out.println("1. Masang Barang");
                System.out.println("2. Mengambil Barang");
                System.out.print("Masukkan nomor opsi yang ingin dilakukan: ");
                Integer nomor = InputChecker.toAngka(scanner.nextLine());
                if(!nomor.equals(-999)){
                    if(nomor.equals(1)){
                        worldClock.getWorld().getSimActive().masangBarang();
                    }
                    else if (nomor.equals(2)){
                        worldClock.getWorld().getSimActive().ambilBarang();
                    }
                    else{
                        System.out.println("Input tidak valid! Edit room gagal dilakukan");
                    }
                }
            }
            
            // Menu nomor 8 (AMAN)
            else if (command.equals("ADD SIM")) {
                if (worldClock.getWorld().getIsCanAddSim()) {
                    Point posisiRumah;

                    // Meminta nama sim
                    boolean nameValid = false;
                    while (!nameValid) {
                        System.out.print("Silakan masukkan nama lengkap: ");
                        String name = scanner.nextLine();
                        if (!name.isBlank()) {
                            int i = 0;
                            boolean namaSimFound = false;
                            while (!namaSimFound && i < worldClock.getWorld().getJumlahSim()) {
                                if (worldClock.getWorld().getSim(i).getNamaLengkap().equals(name)) {
                                    namaSimFound = true;
                                } else {
                                    i++;
                                }
                            }
                            if (!namaSimFound) {
                                nameValid = true;
                                // Meminta posisi Rumah yang ingin dibangun
                                boolean posisiRumahValid = false;
                                boolean posisiRumahTerisi = true;
                                while (!posisiRumahValid || posisiRumahTerisi) {
                                    System.out.print(
                                            "Masukkan lokasi rumah yang diinginkan dengan format x,y (dari 0,0 sampai 64,64): ");
                                    command = scanner.nextLine();
                                    posisiRumahValid = InputChecker.isPointRumah(command);
                                    if (posisiRumahValid) {
                                        posisiRumah = Point.makePoint(command);
                                        if (!worldClock.getWorld().isPosisiTerisi(posisiRumah)) {
                                            posisiRumahTerisi = false;
                                            // Meminta nama ruangan yang ingin dibangun
                                            boolean ruanganValid = false;
                                            while (!ruanganValid) {
                                                System.out.print("Masukkan nama ruangan: ");
                                                String namaRuangan = scanner.nextLine();
                                                if (!namaRuangan.isBlank()) {
                                                    ruanganValid = true;
                                                    // PosisiRuangan random aja kali yak gw bikinnya dari 0 sampai 6
                                                    System.out.println("\nMemuat Rumah....");
                                                    System.out.println("Sim " + name + " berhasil dibuat! ");
                                                    worldClock.getWorld().addRumah(new Point(posisiRumah), name, namaRuangan);
                                                    worldClock.getWorld().addSim(new Sim(new Kesejahteraan(80, 80, 80, 80), 100, name, worldClock.getWorld().getLastRumah()));
                                                    System.out.println("Selamat datang, " + name + "!");
                                                    worldClock.getWorld().setIsCanAddSim(false);
                                                } else {
                                                    System.out.println("Nama ruangan tidak valid");
                                                }
                                            }
                                        } else {
                                            System.out.println(
                                                    "Masukan tidak valid! (Hint: Posisi rumah sudah terisi, silakan pilih posisi lain)");
                                        }

                                        // Meminta nama Ruangan yang ingin dibangun

                                    }
                                    // else untuk posisi rumah tidak valid sudah pake exception
                                }
                            } else {
                                System.out.println(
                                        "Masukan tidak valid! (Hint: Input nama sudah dipakai sim lain, silakan pilih nama yang lain)");
                            }
                        } else {
                            System.out.println("Masukan tidak valid! (Hint: Input anda kosong)");
                        }
                    }
                } else {
                    System.out.println("Kesempatan menambah sim sudah digunakan, silakan menunggu hingga esok hari");
                }
            }

            // Menu nomor 9 (AMAN)
            else if (command.equals("CHANGE SIM")) {
                if (worldClock.getWorld().getJumlahSim() > 1) {
                    System.out.println("Daftar Sim yang dapat dipilih:");
                    for (int i = 0; i < worldClock.getWorld().getJumlahSim(); i++) {
                        System.out.println((i + 1) + ". " + worldClock.getWorld().getSim(i).getNamaLengkap());
                    }
                    System.out.print("Pilih nomor Sim yang ingin dipilih: ");
                    command = scanner.nextLine();
                    Integer pilihan = InputChecker.toAngka(command); // exception
                    if (!pilihan.equals(-999)) {
                        if (pilihan >= 1 && pilihan <= worldClock.getWorld().getJumlahSim()) {
                            worldClock.getWorld().setSimActive(worldClock.getWorld().getListSim().get(pilihan -1));
                            System.out.println("Berhasil mengganti sim active menjadi "
                            + worldClock.getWorld().getSimActive().getNamaLengkap());
                        }
                    } else {
                        System.out.println("Input tidak valid!");
                    }
                } else {
                    System.out.println("Tidak ada Sim lain yang dapat dipilih!");
                }
            }

            // Menu nomor 10 (Harusnya udh aman)
            else if (command.equals("LIST OBJECT")) {
                Ruangan currentRuangan = worldClock.getWorld().getSimActive().getCurrentRuangan();
                System.out.println("Kamu sedang berada di ruangan " + currentRuangan.getNama() + "!");
                if (currentRuangan.getDaftarObjek().isEmpty()) {
                    System.out.println("Tidak terdapat objek di dalam ruanganmu:");
                } else {
                    worldClock.getWorld().getSimActive().getCurrentRuangan().printMapRuangan();
                    System.out.println("Berikut adalah daftar objek yang ada di ruanganmu:");
                    int i = 1;
                    for (Furnitur furnitur : currentRuangan.getDaftarObjek()) {
                        System.out.println(i + ". " + furnitur.getNama() + " (lokasi: " + furnitur.getPosisi() + ")");
                        i += 1;
                    }
                }
            }

            // Menu nomor 11 (Harusnya udh aman)
            else if (command.equals("GO TO OBJECT")) {
                // final int idx = indeksActiveSim;
                Ruangan currentRuangan = worldClock.getWorld().getSimActive().getCurrentRuangan();
                System.out.println("Kamu sedang berada di ruangan " + currentRuangan.getNama() + " pada rumah "+worldClock.getWorld().getSimActive().getCurrentRumah().getKepemilikan()+"!");
                if (currentRuangan.getDaftarObjek().isEmpty()) {
                    System.out.println("Ruangan kosong! tidak ada objek yang dapat dikunjungi");
                } else {
                    worldClock.getWorld().getSimActive().getCurrentRuangan().printMapRuangan();
                    System.out.println("Berikut adalah daftar objek yang dapat dikunjungi");
                    int i = 1;
                    for (Furnitur furnitur : currentRuangan.getDaftarObjek()) {
                        System.out.println(i + ". " + furnitur.getNama() + " (lokasi: " + furnitur.getPosisi() + ")");
                        i++;
                    }
                    Furnitur objek;
                    boolean inputValid = false;
                    while (!inputValid) {
                        System.out.println("Pilih nomor objek yang ingin dikunjungi: ");
                        command = scanner.nextLine();
                        try {
                            objek = currentRuangan.getObjek(Integer.parseInt(command) - 1);
                            if (Integer.parseInt(command) >= 1 && Integer.parseInt(command) < i) {
                                inputValid = true;
                                worldClock.getWorld().getSimActive().setPosisiObjek(objek.getPosisi());
                                System.out.println(worldClock.getWorld().getSimActive().getNamaLengkap()
                                        + " berhasil pindah ke objek " + objek.getNama());
                                if (objek.getKategori().equals("FURNITUR")) {
                                    Furnitur furnitur = (Furnitur) objek;
                                    if (furnitur.getNamaAksi().equals("tidur")) {
                                        System.out.println("Apakah Anda ingin tidur? (Y/N)");
                                        String pilihanTidur = scanner.nextLine().toUpperCase();
                                        if (pilihanTidur.equals("Y")) {
                                            worldClock.getWorld().getSimActive().tidur();
                                        }
                                    } else if (furnitur.getNamaAksi().equals("buang air")) {
                                        System.out.println("Apakah Anda ingin buang air? (Y/N)");
                                        String pilihanBuangAir = scanner.nextLine().toUpperCase();
                                        if (pilihanBuangAir.equals("Y")) {
                                                worldClock.getWorld().getSimActive().buangAir();
                                        }
                                    } else if (furnitur.getNamaAksi().equals("masak")) {
                                        System.out.println("Apakah Anda ingin memasak? (Y/N)");
                                        String pilihanMasak = scanner.nextLine().toUpperCase();
                                        if (pilihanMasak.equals("Y")) {
                                            worldClock.getWorld().getSimActive().masak();
                                        }
                                    } else if (furnitur.getNamaAksi().equals("makan")) {
                                        System.out.println("Apakah Anda ingin makan? (Y/N)");
                                        String pilihanMakan = scanner.nextLine().toUpperCase();
                                        if (pilihanMakan.equals("Y")) {
                                            worldClock.getWorld().getSimActive().makan();
                                            
                                        }
                                    } else if (furnitur.getNamaAksi().equals("melihat waktu")) {
                                        System.out.println("Apakah Anda ingin melihat waktu? (Y/N)");
                                        String pilihanLihatWaktu = scanner.nextLine().toUpperCase();
                                        if (pilihanLihatWaktu.equals("Y")) {
                                            worldClock.melihatWaktu(worldClock.getWorld().getSimActive());

                                        }
                                    } else if (furnitur.getNamaAksi().equals("melukis")) {
                                        System.out.println("Apakah Anda ingin melukis? (Y/N)");
                                        String pilihanMelukis = scanner.nextLine().toUpperCase();
                                        if (pilihanMelukis.equals("Y")) {
                                            worldClock.getWorld().getSimActive().melukis();
                                        }
                                    } else if (furnitur.getNamaAksi().equals("Main musik")) {
                                        System.out.println("Apakah Anda ingin bermain musik? (Y/N)");
                                        String pilihanMusik = scanner.nextLine().toUpperCase();
                                        if (pilihanMusik.equals("Y")) {
                                            worldClock.getWorld().getSimActive().bermainMusik();
                                        }
                                    } else if (furnitur.getNamaAksi().equals("mandi")) {
                                        System.out.println("Apakah Anda ingin mandi? (Y/N)");
                                        String pilihanMandi = scanner.nextLine().toUpperCase();
                                        if (pilihanMandi.equals("Y")) {
                                            worldClock.getWorld().getSimActive().mandi();
                                        }
                                    } else if (furnitur.getNamaAksi().equals("membersihkan rumah")) {
                                        System.out.println("Apakah Anda ingin membersihkan rumah? (Y/N)");
                                        String pilihanBersihRumah = scanner.nextLine().toUpperCase();
                                        if (pilihanBersihRumah.equals("Y")) {
                                            worldClock.getWorld().getSimActive().membersihkanRumah();
                                        }
                                    } else if (furnitur.getNamaAksi().equals("proyekan")) {
                                        System.out.println("Apakah Anda ingin mengerjakan proyek? (Y/N)");
                                        String pilihanProyekan = scanner.nextLine().toUpperCase();
                                        if (pilihanProyekan.equals("Y")) {
                                            worldClock.getWorld().getSimActive().proyekan();
                                        }
                                    } else {
                                        System.out.println("Aksi tidak tersedia");
                                    }
                                }
                            }
                        } catch (IndexOutOfBoundsException e) {
                            System.err.println(
                                    "Input tidak valid! (Hint : input < 1 atau melebihi total objek yang terdapat di dalam ruangan)");
                        } catch (NumberFormatException e) {
                            System.err.println("Input tidak valid! (Hint : input harus berupa angka) ");
                        }
                    }
                }
            }

            // Menu nomor 12 (menu dajjal) <-- real
            else if (command.equals("ACTION")) {
                // final int idx = indeksActiveSim;
                System.out.println("\nBerikut adalah daftar aksi yang bisa kamu lakukan: ");
                System.out.println("1. Kerja");
                System.out.println("2. Olahraga");
                System.out.println("3. Berkunjung");
                System.out.println("4. Yoga");
                System.out.println("5. Berdoa");
                System.out.println("6. Melihat inventory");
                System.out.println("7. Beli barang");
                System.out.println("8. Membersihkan rumah\n");
                System.out.print("Masukkan nama aksi yang ingin dilakukan: ");
                command = scanner.nextLine().toUpperCase();
                if (command.equals("KERJA")) {
                    worldClock.getWorld().getSimActive().kerja();
                } else if (command.equals("OLAHRAGA")) {
                    worldClock.getWorld().getSimActive().olahraga();
                } else if (command.equals("BERKUNJUNG")) {
                    worldClock.getWorld().getSimActive().berkunjung(worldClock.getWorld());
                } else if (command.equals("YOGA")) {
                    worldClock.getWorld().getSimActive().yoga();
                } else if (command.equals("BERDOA")) {
                    worldClock.getWorld().getSimActive().berdoa();
                } else if (command.equals("MELIHAT INVENTORY")) {
                    worldClock.getWorld().getSimActive().viewInventory();
                } else if (command.equals("BELI BARANG")) {
                    worldClock.getWorld().getSimActive().beliBarang();
                } else if (command.equals("MEMBERSIHKAN RUMAH")) {
                    worldClock.getWorld().getSimActive().membersihkanRumah();
                } else {
                    System.out.println("Input tidak valid! Silahkan coba lagi.\n");
                }
            }

            // Menu nomor 13 (aman)
            else if (command.equals("EXIT")) {
                endedgame = true;
                System.out.println("Sampai jumpa kembali! \n");
                executorService.shutdown();
            } else {
                System.out.println("Input tidak valid! Silahkan coba lagi.");
            }

            //check kematian setelah melakukan aksi
            worldClock.checkKematian();
            if(worldClock.getWorld().getListSim().size() <= 0){
                try {
                    Thread.sleep(1000);
                    System.out.println("Sudah tidak terdapat sim lain yang dapat dimainkan!");
                    System.out.println("Total Skormu: "+worldClock.getDays()+" hari, "+worldClock.getMinute()+" menit, "+worldClock.getSeconds()+" detik.");
                    System.out.println("GAME OVER");
                    endedgame = true;
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
        scanner.close();
        worldClock.stop();
    }
}
